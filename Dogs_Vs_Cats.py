# -*- coding: utf-8 -*-
"""Dogs_vs_Cats

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15DZsKhnV37X8Ah8NqJp9XlYt-FaV-H3U
"""

pip install kaggle

mkdir ~/.kaggle

cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c dogs-vs-cats

!unzip /content/dogs-vs-cats.zip

!unzip /content/test1.zip

!unzip /content/train.zip

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix
from skimage import io, color, transform
from sklearn import preprocessing
import os

def load_kaggle_dataset(base_path, subset_size=None):
    data = []
    labels = []

    categories = ['cat', 'dog']

    for category in categories:
        path = os.path.join(base_path, 'train')
        label = categories.index(category)
        filenames = [filename for filename in os.listdir(path) if filename.startswith(category)][:subset_size] if subset_size else os.listdir(path)

        for filename in filenames:
            img_path = os.path.join(path, filename)
            image = io.imread(img_path)
            image = color.rgb2gray(image)
            image = transform.resize(image, (64, 64))
            image = image.flatten()
            data.append(image)
            labels.append(label)

    return np.array(data), np.array(labels)

base_path = '/content/sample_data/Untitled Folder'

X, y = load_kaggle_dataset(base_path, subset_size=500)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = preprocessing.StandardScaler().fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

svm_model = svm.SVC(kernel='linear', C=1)
svm_model.fit(X_train_scaled, y_train)

y_pred = svm_model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:')
print(conf_matrix)

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn import preprocessing
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from keras.preprocessing.image import ImageDataGenerator
from skimage import io, color, transform
import os

def load_kaggle_dataset(base_path, subset_size=None):
    data = []
    labels = []

    categories = ['cat', 'dog']

    for category in categories:
        path = os.path.join(base_path, 'train')
        label = categories.index(category)

        filenames = [filename for filename in os.listdir(path) if filename.startswith(category)][:subset_size] if subset_size else os.listdir(path)

        for filename in filenames:
            img_path = os.path.join(path, filename)
            image = io.imread(img_path)
            image = color.rgb2gray(image)
            image = transform.resize(image, (64, 64))
            data.append(image)
            labels.append(label)

    return np.array(data), np.array(labels)
base_path = '/content/sample_data/Untitled Folder'
X, y = load_kaggle_dataset(base_path, subset_size=500)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

scaler = preprocessing.StandardScaler()

X_train_reshaped = X_train.reshape(-1, 64 * 64)
X_test_reshaped = X_test.reshape(-1, 64 * 64)

X_train_scaled = scaler.fit_transform(X_train_reshaped)
X_test_scaled = scaler.transform(X_test_reshaped)

X_train_scaled = X_train_scaled.reshape(-1, 64, 64, 1)
X_test_scaled = X_test_scaled.reshape(-1, 64, 64, 1)

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


history = model.fit(datagen.flow(X_train_scaled, y_train, batch_size=32),
                    steps_per_epoch=len(X_train_scaled) / 32,
                    epochs=50,
                    validation_data=(X_test_scaled, y_test),
                    verbose=1)
y_pred = (model.predict(X_test_scaled) > 0.5).astype(int)
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Confusion Matrix:')
print(conf_matrix)

import matplotlib.pyplot as plt
import random

def show_images(images, labels, rows, cols):
    fig, axes = plt.subplots(rows, cols, figsize=(10, 10))
    for i in range(rows):
        for j in range(cols):
            index = i * cols + j
            axes[i, j].imshow(images[index], cmap='gray')
            axes[i, j].axis('off')
            axes[i, j].set_title('Cat' if labels[index] == 0 else 'Dog')


sample_indices = random.sample(range(len(X)), 9)
sample_images = X[sample_indices]
sample_labels = y[sample_indices]

show_images(sample_images, sample_labels, 3, 3)
plt.show()

